import { resolve, dirname } from "node:path";
import { fileURLToPath } from "node:url";

/**
 * @param {string} relativePath
 * @returns {string}
 */
function abs(relativePath) {
  return resolve(dirname(fileURLToPath(import.meta.url)), relativePath);
}

export const config = {
  internals: [/node\:/, /js-tiktoken/],
  entrypoints: {
    agents: "src/agents.ts",
    caches: "src/caches.ts",
    "callbacks/base": "src/callbacks/base.ts",
    "callbacks/manager": "src/callbacks/manager.ts",
    "callbacks/promises": "src/callbacks/promises.ts",
    chat_history: "src/chat_history.ts",
    documents: "src/documents/index.ts",
    "document_loaders/base": "src/document_loaders/base.ts",
    embeddings: "src/embeddings.ts",
    example_selectors: "src/example_selectors/index.ts",
    indexing: "src/indexing/index.ts",
    "language_models/base": "src/language_models/base.ts",
    "language_models/chat_models": "src/language_models/chat_models.ts",
    "language_models/llms": "src/language_models/llms.ts",
    load: "src/load/index.ts",
    "load/serializable": "src/load/serializable.ts",
    memory: "src/memory.ts",
    messages: "src/messages/index.ts",
    "messages/tool": "src/messages/tool.ts",
    output_parsers: "src/output_parsers/index.ts",
    "output_parsers/openai_tools": "src/output_parsers/openai_tools/index.ts",
    "output_parsers/openai_functions": "src/output_parsers/openai_functions/index.ts",
    outputs: "src/outputs.ts",
    prompts: "src/prompts/index.ts",
    prompt_values: "src/prompt_values.ts",
    runnables: "src/runnables/index.ts",
    "runnables/remote": "src/runnables/remote.ts",
    retrievers: "src/retrievers/index.ts",
    "retrievers/document_compressors": "src/retrievers/document_compressors/base.ts",
    singletons: "src/singletons/index.ts",
    stores: "src/stores.ts",
    "structured_query": "src/structured_query/index.ts",
    tools: "src/tools.ts",
    "tracers/base": "src/tracers/base.ts",
    "tracers/console": "src/tracers/console.ts",
    "tracers/initialize": "src/tracers/initialize.ts",
    "tracers/log_stream": "src/tracers/log_stream.ts",
    "tracers/run_collector": "src/tracers/run_collector.ts",
    "tracers/tracer_langchain": "src/tracers/tracer_langchain.ts",
    "tracers/tracer_langchain_v1": "src/tracers/tracer_langchain_v1.ts",
    "utils/async_caller": "src/utils/async_caller.ts",
    "utils/beta_warning": "src/utils/beta_warning.ts",
    "utils/chunk_array": "src/utils/chunk_array.ts",
    "utils/env": "src/utils/env.ts",
    "utils/event_source_parse": "src/utils/event_source_parse.ts",
    "utils/function_calling": "src/utils/function_calling.ts",
    "utils/hash": "src/utils/hash.ts",
    "utils/json_patch": "src/utils/json_patch.ts",
    "utils/json_schema": "src/utils/json_schema.ts",
    "utils/math": "src/utils/math.ts",
    "utils/stream": "src/utils/stream.ts",
    "utils/testing": "src/utils/testing/index.ts",
    "utils/tiktoken": "src/utils/tiktoken.ts",
    "utils/types": "src/utils/types/index.ts",
    vectorstores: "src/vectorstores.ts",
  },
  tsConfigPath: resolve("./tsconfig.json"),
  packageSuffix: "core",
  cjsSource: "./dist-cjs",
  cjsDestination: "./dist",
  abs,
  tSupConfig: {
    name: "@langchain/core",
    dts: true,
    format: ["cjs", "esm"],
    splitting: false,
    sourcemap: true,
    clean: true,
    platform: "neutral",
    outDir: `dist`,
    tsconfig: `tsconfig.json`,
  }
}