import { resolve, dirname } from "node:path";
import { fileURLToPath } from "node:url";

/**
 * @param {string} relativePath
 * @returns {string}
 */
function abs(relativePath) {
  return resolve(dirname(fileURLToPath(import.meta.url)), relativePath);
}

export const config = {
  internals: [
    /node\:/,
    /js-tiktoken/,
    /@langchain\/core/,
    /langsmith/,
    /@langchain\/anthropic/,
    /@langchain\/community/,
    "axios", // axios is a dependency of openai
    "@rockset/client/dist/codegen/api.js",
    "mysql2/promise",
    "pdf-parse/lib/pdf.js/v1.10.100/build/pdf.js",
    "@zilliz/milvus2-sdk-node/dist/milvus/const/Milvus.js",
    "@zilliz/milvus2-sdk-node/dist/milvus/types.js",
    "notion-to-md/build/utils/notion.js",
    "firebase-admin/app",
    "firebase-admin/firestore",
    "web-auth-library/google",
    "@google-ai/generativelanguage/build/protos/protos.js",
  ],
  entrypoints: {
    load: "src/load/index.ts",
    "load/serializable": "src/load/serializable.ts",
    // agents
    agents: "src/agents/index.ts",
    "agents/load": "src/agents/load.ts",
    "agents/toolkits": "src/agents/toolkits/index.ts",
    "agents/toolkits/sql": "src/agents/toolkits/sql/index.ts",
    "agents/format_scratchpad": "src/agents/format_scratchpad/openai_functions.ts",
    "agents/format_scratchpad/openai_tools":
      "src/agents/format_scratchpad/openai_tools.ts",
    "agents/format_scratchpad/log": "src/agents/format_scratchpad/log.ts",
    "agents/format_scratchpad/xml": "src/agents/format_scratchpad/xml.ts",
    "agents/format_scratchpad/log_to_message":
      "src/agents/format_scratchpad/log_to_message.ts",
    "agents/react/output_parser": "src/agents/react/output_parser.ts",
    "agents/xml/output_parser": "src/agents/xml/output_parser.ts",
    "agents/openai/output_parser": "src/agents/openai/output_parser.ts",
    // tools
    tools: "src/tools/index.ts",
    "tools/chain": "src/tools/chain.ts",
    "tools/render": "src/tools/render.ts",
    "tools/retriever": "src/tools/retriever.ts",
    "tools/sql": "src/tools/sql.ts",
    "tools/webbrowser": "src/tools/webbrowser.ts",
    // chains
    chains: "src/chains/index.ts",
    "chains/combine_documents": "src/chains/combine_documents/index.ts",
    "chains/combine_documents/reduce": "src/chains/combine_documents/reduce.ts",
    "chains/history_aware_retriever": "src/chains/history_aware_retriever.ts",
    "chains/load": "src/chains/load.ts",
    "chains/openai_functions": "src/chains/openai_functions/index.ts",
    "chains/query_constructor": "src/chains/query_constructor/index.ts",
    "chains/query_constructor/ir": "src/chains/query_constructor/ir.ts",
    "chains/retrieval": "src/chains/retrieval.ts",
    "chains/sql_db": "src/chains/sql_db/index.ts",
    "chains/graph_qa/cypher": "src/chains/graph_qa/cypher.ts",
    // embeddings
    "embeddings/cache_backed": "src/embeddings/cache_backed.ts",
    "embeddings/fake": "src/embeddings/fake.ts",
    // vectorstores
    "vectorstores/memory": "src/vectorstores/memory.ts",
    // text_splitter
    text_splitter: "src/text_splitter.ts",
    // memory
    "memory": "src/memory/index.ts",
    // TODO: Remove on breaking change
    "memory/index": "src/memory/index.ts",
    "memory/chat_memory": "src/memory/chat_memory.ts",
    // document
    document: "src/document.ts",
    // document_loaders
    "document_loaders/base": "src/document_loaders/base.ts",
    "document_loaders/web/apify_dataset": "src/document_loaders/web/apify_dataset.ts",
    "document_loaders/web/assemblyai": "src/document_loaders/web/assemblyai.ts",
    "document_loaders/web/azure_blob_storage_container":
      "src/document_loaders/web/azure_blob_storage_container.ts",
    "document_loaders/web/azure_blob_storage_file":
      "src/document_loaders/web/azure_blob_storage_file.ts",
    "document_loaders/web/browserbase":
      "src/document_loaders/web/browserbase.ts",
    "document_loaders/web/cheerio": "src/document_loaders/web/cheerio.ts",
    "document_loaders/web/puppeteer": "src/document_loaders/web/puppeteer.ts",
    "document_loaders/web/playwright": "src/document_loaders/web/playwright.ts",
    "document_loaders/web/college_confidential":
      "src/document_loaders/web/college_confidential.ts",
    "document_loaders/web/gitbook": "src/document_loaders/web/gitbook.ts",
    "document_loaders/web/hn": "src/document_loaders/web/hn.ts",
    "document_loaders/web/imsdb": "src/document_loaders/web/imsdb.ts",
    "document_loaders/web/figma": "src/document_loaders/web/figma.ts",
    "document_loaders/web/firecrawl": "src/document_loaders/web/firecrawl.ts",
    "document_loaders/web/github": "src/document_loaders/web/github.ts",
    "document_loaders/web/notiondb": "src/document_loaders/web/notiondb.ts",
    "document_loaders/web/notionapi": "src/document_loaders/web/notionapi.ts",
    "document_loaders/web/pdf": "src/document_loaders/web/pdf.ts",
    "document_loaders/web/recursive_url": "src/document_loaders/web/recursive_url.ts",
    "document_loaders/web/s3": "src/document_loaders/web/s3.ts",
    "document_loaders/web/sitemap": "src/document_loaders/web/sitemap.ts",
    "document_loaders/web/sonix_audio": "src/document_loaders/web/sonix_audio.ts",
    "document_loaders/web/confluence": "src/document_loaders/web/confluence.ts",
    "document_loaders/web/couchbase": "src/document_loaders/web/couchbase.ts",
    "document_loaders/web/searchapi": "src/document_loaders/web/searchapi.ts",
    "document_loaders/web/serpapi": "src/document_loaders/web/serpapi.ts",
    "document_loaders/web/sort_xyz_blockchain":
      "src/document_loaders/web/sort_xyz_blockchain.ts",
    "document_loaders/web/youtube": "src/document_loaders/web/youtube.ts",
    "document_loaders/fs/directory": "src/document_loaders/fs/directory.ts",
    "document_loaders/fs/buffer": "src/document_loaders/fs/buffer.ts",
    "document_loaders/fs/chatgpt": "src/document_loaders/fs/chatgpt.ts",
    "document_loaders/fs/text": "src/document_loaders/fs/text.ts",
    "document_loaders/fs/json": "src/document_loaders/fs/json.ts",
    "document_loaders/fs/srt": "src/document_loaders/fs/srt.ts",
    "document_loaders/fs/pdf": "src/document_loaders/fs/pdf.ts",
    "document_loaders/fs/docx": "src/document_loaders/fs/docx.ts",
    "document_loaders/fs/epub": "src/document_loaders/fs/epub.ts",
    "document_loaders/fs/csv": "src/document_loaders/fs/csv.ts",
    "document_loaders/fs/notion": "src/document_loaders/fs/notion.ts",
    "document_loaders/fs/obsidian": "src/document_loaders/fs/obsidian.ts",
    "document_loaders/fs/unstructured": "src/document_loaders/fs/unstructured.ts",
    "document_loaders/fs/openai_whisper_audio":
      "src/document_loaders/fs/openai_whisper_audio.ts",
    "document_loaders/fs/pptx": "src/document_loaders/fs/pptx.ts",
    // document_transformers
    "document_transformers/openai_functions":
      "src/document_transformers/openai_functions.ts",
    // sql_db
    sql_db: "src/sql_db.ts",
    // callbacks
    callbacks: "src/callbacks/index.ts",
    // output_parsers
    output_parsers: "src/output_parsers/index.ts",
    "output_parsers/expression": "src/output_parsers/expression.ts",
    // retrievers
    "retrievers/contextual_compression": "src/retrievers/contextual_compression.ts",
    "retrievers/document_compressors": "src/retrievers/document_compressors/index.ts",
    "retrievers/multi_query": "src/retrievers/multi_query.ts",
    "retrievers/multi_vector": "src/retrievers/multi_vector.ts",
    "retrievers/parent_document": "src/retrievers/parent_document.ts",
    "retrievers/time_weighted": "src/retrievers/time_weighted.ts",
    "retrievers/document_compressors/chain_extract":
      "src/retrievers/document_compressors/chain_extract.ts",
    "retrievers/document_compressors/embeddings_filter":
      "src/retrievers/document_compressors/embeddings_filter.ts",
    "retrievers/hyde": "src/retrievers/hyde.ts",
    "retrievers/score_threshold": "src/retrievers/score_threshold.ts",
    "retrievers/self_query": "src/retrievers/self_query/index.ts",
    "retrievers/self_query/chroma": "src/retrievers/self_query/chroma.ts",
    "retrievers/self_query/functional": "src/retrievers/self_query/functional.ts",
    "retrievers/self_query/pinecone": "src/retrievers/self_query/pinecone.ts",
    "retrievers/self_query/supabase": "src/retrievers/self_query/supabase.ts",
    "retrievers/self_query/weaviate": "src/retrievers/self_query/weaviate.ts",
    "retrievers/self_query/vectara": "src/retrievers/self_query/vectara.ts",
    "retrievers/matryoshka_retriever": "src/retrievers/matryoshka_retriever.ts",
    // cache
    "cache/file_system": "src/cache/file_system.ts",
    // stores
    "stores/doc/base": "src/stores/doc/base.ts",
    "stores/doc/in_memory": "src/stores/doc/in_memory.ts",
    "stores/file/in_memory": "src/stores/file/in_memory.ts",
    "stores/file/node": "src/stores/file/node.ts",
    "stores/message/in_memory": "src/stores/message/in_memory.ts",
    // storage
    "storage/encoder_backed": "src/storage/encoder_backed.ts",
    "storage/in_memory": "src/storage/in_memory.ts",
    "storage/file_system": "src/storage/file_system.ts",
    // hub
    hub: "src/hub.ts",
    // utilities
    "util/document": "src/util/document.ts",
    "util/math": "src/util/math.ts",
    "util/time": "src/util/time.ts",
    // experimental
    "experimental/autogpt": "src/experimental/autogpt/index.ts",
    "experimental/openai_assistant": "src/experimental/openai_assistant/index.ts",
    "experimental/openai_files": "src/experimental/openai_files/index.ts",
    "experimental/babyagi": "src/experimental/babyagi/index.ts",
    "experimental/generative_agents": "src/experimental/generative_agents/index.ts",
    "experimental/plan_and_execute": "src/experimental/plan_and_execute/index.ts",
    "experimental/chains/violation_of_expectations":
      "src/experimental/chains/violation_of_expectations/index.ts",
    "experimental/masking": "src/experimental/masking/index.ts",
    "experimental/prompts/custom_format": "src/experimental/prompts/custom_format.ts",
    "experimental/prompts/handlebars": "src/experimental/prompts/handlebars.ts",
    "experimental/tools/pyinterpreter": "src/experimental/tools/pyinterpreter.ts",
    // evaluation
    evaluation: "src/evaluation/index.ts",
    // smith (LangSmith Evaluation)
    smith: "src/smith/index.ts",
    // runnables
    "runnables/remote": "src/runnables/remote.ts",
    // indexes
    indexes: "src/indexes/index.ts",
    "schema/query_constructor": "src/schema/query_constructor.ts",
    "schema/prompt_template": "src/schema/prompt_template.ts",
  },
  deprecatedOmitFromImportMap: [
    "document",
    "load/serializable",
    "runnables",
    "document_loaders/web/searchapi",
    "retrievers/self_query/chroma",
    "retrievers/self_query/pinecone",
    "retrievers/self_query/supabase",
    "retrievers/self_query/weaviate",
    "retrievers/self_query/vectara",
    "document_loaders/web/serpapi",
    "document_loaders/web/sort_xyz_blockchain"
  ],
  requiresOptionalDependency: [
    "agents/load",
    "agents/toolkits/sql",
    "tools/sql",
    "tools/webbrowser",
    "chains/load",
    "chains/sql_db",
    "chains/graph_qa/cypher",
    "llms/load",
    "prompts/load",
    "memory/zep",
    "document_loaders/web/apify_dataset",
    "document_loaders/web/assemblyai",
    "document_loaders/web/azure_blob_storage_container",
    "document_loaders/web/azure_blob_storage_file",
    "document_loaders/web/browserbase",
    "document_loaders/web/cheerio",
    "document_loaders/web/puppeteer",
    "document_loaders/web/playwright",
    "document_loaders/web/college_confidential",
    "document_loaders/web/gitbook",
    "document_loaders/web/hn",
    "document_loaders/web/imsdb",
    "document_loaders/web/figma",
    "document_loaders/web/firecrawl",
    "document_loaders/web/github",
    "document_loaders/web/pdf",
    "document_loaders/web/notiondb",
    "document_loaders/web/notionapi",
    "document_loaders/web/recursive_url",
    "document_loaders/web/s3",
    "document_loaders/web/sitemap",
    "document_loaders/web/sonix_audio",
    "document_loaders/web/confluence",
    "document_loaders/web/couchbase",
    "document_loaders/web/youtube",
    "document_loaders/fs/directory",
    "document_loaders/fs/buffer",
    "document_loaders/fs/chatgpt",
    "document_loaders/fs/text",
    "document_loaders/fs/json",
    "document_loaders/fs/srt",
    "document_loaders/fs/pdf",
    "document_loaders/fs/docx",
    "document_loaders/fs/epub",
    "document_loaders/fs/csv",
    "document_loaders/fs/notion",
    "document_loaders/fs/obsidian",
    "document_loaders/fs/unstructured",
    "document_loaders/fs/openai_whisper_audio",
    "document_loaders/fs/pptx",
    "document_transformers/html_to_text",
    "document_transformers/mozilla_readability",
    "sql_db",
    "retrievers/self_query",
    "retrievers/self_query/functional",
    "output_parsers/expression",
    "chains/query_constructor",
    "chains/query_constructor/ir",
    "cache/file_system",
    "stores/file/node",
    "storage/file_system",
    // Prevent export due to circular dependency with "load" entrypoint
    "hub",
    "experimental/prompts/handlebars",
    "experimental/tools/pyinterpreter",
  ],
  extraImportMapEntries: [
    {
      modules: ["ChatOpenAI"],
      alias: ["chat_models", "openai"],
      path: "@langchain/openai",
    },
    {
      modules: ["OpenAI"],
      alias: ["llms", "openai"],
      path: "@langchain/openai",
    },
    {
      modules: ["OpenAIEmbeddings"],
      alias: ["embeddings", "openai"],
      path: "@langchain/openai",
    },
    {
      modules: ["PromptTemplate"],
      alias: ["prompts", "prompt"],
      path: "@langchain/core/prompts",
    },
    {
      modules: [
        "AIMessage",
        "AIMessageChunk",
        "BaseMessage",
        "BaseMessageChunk",
        "ChatMessage",
        "ChatMessageChunk",
        "FunctionMessage",
        "FunctionMessageChunk",
        "HumanMessage",
        "HumanMessageChunk",
        "SystemMessage",
        "SystemMessageChunk",
        "ToolMessage",
        "ToolMessageChunk",
      ],
      alias: ["schema", "messages"],
      path: "@langchain/core/messages",
    },
    {
      modules: [
        "AIMessage",
        "AIMessageChunk",
        "BaseMessage",
        "BaseMessageChunk",
        "ChatMessage",
        "ChatMessageChunk",
        "FunctionMessage",
        "FunctionMessageChunk",
        "HumanMessage",
        "HumanMessageChunk",
        "SystemMessage",
        "SystemMessageChunk",
        "ToolMessage",
        "ToolMessageChunk",
      ],
      alias: ["schema"],
      path: "@langchain/core/messages",
    },
    {
      modules: [
        "AIMessagePromptTemplate",
        "ChatMessagePromptTemplate",
        "ChatPromptTemplate",
        "HumanMessagePromptTemplate",
        "MessagesPlaceholder",
        "SystemMessagePromptTemplate",
      ],
      alias: ["prompts", "chat"],
      path: "@langchain/core/prompts",
    },
    {
      modules: [
        "ImagePromptTemplate",
      ],
      alias: ["prompts", "image"],
      path: "@langchain/core/prompts",
    },
    {
      modules: ["PipelinePromptTemplate"],
      alias: ["prompts", "pipeline"],
      path: "@langchain/core/prompts",
    },
    {
      modules: ["StringPromptValue"],
      alias: ["prompts", "base"],
      path: "@langchain/core/prompt_values",
    },
    {
      modules: [
        "RouterRunnable",
        "RunnableAssign",
        "RunnableBinding",
        "RunnableBranch",
        "RunnableEach",
        "RunnableMap",
        "RunnableParallel",
        "RunnablePassthrough",
        "RunnablePick",
        "RunnableRetry",
        "RunnableSequence",
        "RunnableWithFallbacks",
        "RunnableWithMessageHistory",
      ],
      alias: ["schema", "runnable"],
      path: "@langchain/core/runnables",
    },
    {
      modules: ["StringOutputParser"],
      alias: ["schema", "output_parser"],
      path: "@langchain/core/output_parsers",
    },
    {
      modules: ["ChatGenerationChunk", "GenerationChunk"],
      alias: ["schema", "output"],
      path: "@langchain/core/outputs",
    }
  ],
  shouldTestExports: true,
  tsConfigPath: resolve("./tsconfig.json"),
  cjsSource: "./dist-cjs",
  cjsDestination: "./dist",
  abs,
  tSupConfig: {
    name: "langchain",
    dts: true,
    format: ["cjs", "esm"],
    splitting: false,
    sourcemap: false,
    clean: true,
    platform: "node",
    outDir: `dist`,
    tsconfig: `tsconfig.json`,
  }
};
